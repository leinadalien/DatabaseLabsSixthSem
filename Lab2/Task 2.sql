CREATE OR REPLACE TRIGGER STUDENTS_UNIQUE_ID
BEFORE INSERT ON STUDENTS
FOR EACH ROW
DECLARE
  ID_COUNT NUMBER;
BEGIN
  SELECT COUNT(*) INTO ID_COUNT FROM STUDENTS WHERE ID = :NEW.ID;
  IF ID_COUNT > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'ID MUST BE UNIQUE');
  END IF;
END;

CREATE OR REPLACE TRIGGER STUDENTS_AUTOINC_ID
BEFORE INSERT ON STUDENTS
FOR EACH ROW
DECLARE
  NEW_ID NUMBER;
BEGIN
  SELECT MAX(ID) + 1 INTO NEW_ID FROM STUDENTS;
  IF NEW_ID IS NULL THEN
    NEW_ID := 1;
  END IF;
  :NEW.ID := NEW_ID;
END;

CREATE OR REPLACE TRIGGER GROUPS_UNIQUE_ID
BEFORE INSERT ON GROUPS
FOR EACH ROW
DECLARE
  ID_COUNT NUMBER;
BEGIN
  SELECT COUNT(*) INTO ID_COUNT FROM GROUPS WHERE ID = :NEW.ID;
  IF ID_COUNT > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'ID MUST BE UNIQUE');
  END IF;
END;

CREATE OR REPLACE TRIGGER GROUPS_AUTOINC_ID
BEFORE INSERT ON GROUPS
FOR EACH ROW
DECLARE
  NEW_ID NUMBER;
BEGIN
  SELECT MAX(ID) + 1 INTO NEW_ID FROM GROUPS;
  IF NEW_ID IS NULL THEN
    NEW_ID := 1;
  END IF;
  :NEW.ID := NEW_ID;
END;

CREATE OR REPLACE TRIGGER GROUPS_UNIQUE_NAME
FOR INSERT OR UPDATE ON GROUPS
COMPOUND TRIGGER
    TYPE NAME_ARRAY_TYPE IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
    GROUP_NAMES NAME_ARRAY_TYPE;
    BEFORE EACH ROW IS
    BEGIN
        FOR COUNTER IN 1..GROUP_NAMES.COUNT LOOP
            IF :NEW.NAME = GROUP_NAMES(COUNTER) THEN
                RAISE_APPLICATION_ERROR(-20041, 'NAME MUST BE UNIQUE');
            END IF;
        END LOOP;
    END BEFORE EACH ROW;
    
    AFTER EACH ROW IS
    BEGIN
        GROUP_NAMES(GROUP_NAMES.COUNT + 1) := :NEW.name;
    END AFTER EACH ROW;
END GROUPS_UNIQUE_NAME;